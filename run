#!/usr/bin/env python3
import subprocess, sys, os, argparse, shutil, json
from os.path import join
from subprocess import run, PIPE

path = os.path.dirname(os.path.realpath(__file__))
bindir = join(path, "bin")
division = join(bindir, "division")
labelindex = join(bindir, "label-index")
numcounter = join(bindir, "num-counter")
numindex = join(bindir, "num-index")
catecounter = join(bindir, "cate-counter")
cateindex = join(bindir, "cate-index")
featmap = join(bindir, "featmap")
merge = join(bindir, "merge")
split = join(bindir, "split")

def parse_args():
	parser = argparse.ArgumentParser()
	parser.add_argument("sourcefile")
	parser.add_argument("targetdir")
	parser.add_argument("--train", type=int, required=True)
	parser.add_argument("--threshold", type=float, default=0.0)
	parser.add_argument("--div", default="div")
	parser.add_argument("--cnt", default="cnt")
	parser.add_argument("--idx", default="idx")
	parser.add_argument("--fm", default="fm")
	parser.add_argument("--tmp", default="tmp")
	parser.add_argument("--quiet", "-q", dest="verbose", action="store_false")
	return parser.parse_args()

args = parse_args()
fields = input().split()

divdir = "{}.{}".format(args.sourcefile, args.div)
cntdir = "{}.{}".format(args.sourcefile, args.cnt)
idxdir = "{}.{}".format(args.sourcefile, args.idx)
fmdir = "{}.{}".format(args.sourcefile, args.fm)
tmpdir = "{}.{}".format(args.sourcefile, args.tmp)

targetfile = join(args.targetdir, "data")
trainfile = join(args.targetdir, "train")
testfile = join(args.targetdir, "test")
targetfeatmap = join(args.targetdir, ".featmap")
targetmeta = join(args.targetdir, ".meta")

os.makedirs(divdir, exist_ok=True)
os.makedirs(cntdir, exist_ok=True)
os.makedirs(idxdir, exist_ok=True)
os.makedirs(fmdir, exist_ok=True)

if args.verbose:
	print("division")
start_indices, summation = [], 0
proc = run([division, args.sourcefile, divdir, "--num", str(len(fields))], stdout=PIPE)

num_lines = int(proc.stdout.strip())
num_threshold = int(num_lines * args.threshold)
cate_threshold = int(num_lines * args.threshold)

for i, f in enumerate(fields):
	if args.verbose:
		print("process field {i}, type {f}".format(i=i, f=f))
	divfile = join(divdir, str(i))
	if f == "label":
		start_indices.append('.')

		run([labelindex, divfile, join(idxdir, str(i))])
	elif f == "num":
		start_indices.append(summation + 1)

		cntfile = join(cntdir, str(i))
		idxfile = join(idxdir, str(i))
		fmfile = join(fmdir, str(i))

		run([numcounter, divfile, cntfile])
		proc = run([numindex, divfile, idxfile, "--counter", cntfile, "--featmap", fmfile, "--threshold", str(num_threshold)], stdout=PIPE)
		summation += int(proc.stdout.strip())

		os.remove(cntfile)

	elif f == "cate":
		start_indices.append(summation + 1)
		cntfile = join(cntdir, str(i))
		idxfile = join(idxdir, str(i))
		fmfile = join(fmdir, str(i))

		os.makedirs(tmpdir, exist_ok=True)
		run([catecounter, divfile, cntfile, "--tmp", tmpdir])
		shutil.rmtree(tmpdir)
		proc = run([cateindex, divfile, idxfile, "--counter", cntfile, "--featmap", fmfile, "--threshold", str(cate_threshold)], stdout=PIPE)
		summation += int(proc.stdout.strip())

		os.remove(cntfile)

	os.remove(divfile)

shutil.rmtree(divdir)
shutil.rmtree(cntdir)

if args.verbose:
	print("featmap")
os.makedirs(args.targetdir, exist_ok=True)
featfields = [i for i, f in enumerate(fields) if f in ["num", "cate"]]
run([featmap, fmdir, targetfeatmap], input=' '.join([str(i) for i in featfields]), universal_newlines=True)
shutil.rmtree(fmdir)

if args.verbose:
	print("merge")
run([merge, idxdir, targetfile], input=' '.join([str(i) for i in start_indices]), universal_newlines=True)
shutil.rmtree(idxdir)

if args.verbose:
	print("split")
entrysize = len(fields) * 4
run([split, targetfile, str(entrysize), trainfile, str(args.train), testfile])
os.remove(targetfile)

meta = {
	"width": len(fields),
	"size": {
		"train": args.train,
		"test": num_lines - args.train
	},
	"vocabulary": summation + 1
}

with open(targetmeta, "w") as f:
	print(json.dumps(meta), file=f)
if args.verbose:
	print("done")