#!/usr/bin/env python3
import subprocess, sys, os, argparse, shutil
from os.path import join
from subprocess import run, PIPE

path = os.path.dirname(os.path.realpath(__file__))
bindir = join(path, "bin")
division = join(bindir, "division")
labelindex = join(bindir, "label-index")
numcounter = join(bindir, "num-counter")
numindex = join(bindir, "num-index")
catecounter = join(bindir, "cate-counter")
cateindex = join(bindir, "cate-index")
featmap = join(bindir, "featmap")
merge = join(bindir, "merge")

def parse_args():
	parser = argparse.ArgumentParser()
	parser.add_argument("sourcefile")
	parser.add_argument("targetdir")
	parser.add_argument("--num_threshold", type=int, default=0)
	parser.add_argument("--cate_threshold", type=int, default=0)
	parser.add_argument("--div", default="div")
	parser.add_argument("--cnt", default="cnt")
	parser.add_argument("--idx", default="idx")
	parser.add_argument("--fm", default="fm")
	parser.add_argument("--tmp", default="tmp")
	return parser.parse_args()

args = parse_args()
fields = input().split()

divdir = "{}.{}".format(args.sourcefile, args.div)
cntdir = "{}.{}".format(args.sourcefile, args.cnt)
idxdir = "{}.{}".format(args.sourcefile, args.idx)
fmdir = "{}.{}".format(args.sourcefile, args.fm)
tmpdir = "{}.{}".format(args.sourcefile, args.tmp)

targetfile = join(args.targetdir, "data")
targetfeatmap = join(args.targetdir, ".featmap")
targetmeta = join(args.targetdir, ".meta")

os.makedirs(divdir, exist_ok=True)
os.makedirs(cntdir, exist_ok=True)
os.makedirs(idxdir, exist_ok=True)
os.makedirs(fmdir, exist_ok=True)

run([division, args.sourcefile, divdir, "--num", str(len(fields))])
for i, f in enumerate(fields):
	divfile = join(divdir, str(i))
	if f == "label":
		run([labelindex, divfile, join(idxdir, str(i))])
	elif f == "num":
		cntfile = join(cntdir, str(i))
		idxfile = join(idxdir, str(i))
		fmfile = join(fmdir, str(i))

		run([numcounter, divfile, cntfile])
		run([numindex, divfile, idxfile, "--counter", cntfile, "--featmap", fmfile, "--threshold", str(args.num_threshold)])

		os.remove(cntfile)

	elif f == "cate":
		cntfile = join(cntdir, str(i))
		idxfile = join(idxdir, str(i))
		fmfile = join(fmdir, str(i))

		os.makedirs(tmpdir, exist_ok=True)
		run([catecounter, divfile, cntfile, "--tmp", tmpdir])
		shutil.rmtree(tmpdir)
		run([cateindex, divfile, idxfile, "--counter", cntfile, "--featmap", fmfile, "--threshold", str(args.cate_threshold)])

		os.remove(cntfile)

	os.remove(divfile)

shutil.rmtree(divdir)
shutil.rmtree(cntdir)

os.makedirs(args.targetdir, exist_ok=True)
featfields = [i for i, f in enumerate(fields) if f in ["num", "cate"]]
run([featmap, fmdir, targetfeatmap], input=' '.join([str(i) for i in featfields]), universal_newlines=True)
shutil.rmtree(fmdir)

